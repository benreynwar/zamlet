import mill._
import mill.scalalib._
import mill.scalalib.TestModule.ScalaTest

// Note: This project requires .mill-jvm-opts file containing:
//   -Dchisel.project.root=${PWD}
// This is needed because Chisel needs to know the project root directory
// to properly generate and handle test directories and output files.
// See: https://github.com/com-lihaoyi/mill/issues/3840

object fmvpu extends SbtModule { m =>
  override def millSourcePath = super.millSourcePath / os.up
  override def scalaVersion = "2.13.16"
  
  override def scalacOptions = Seq(
    "-language:reflectiveCalls",
    "-deprecation",
    "-feature",
    "-Xcheckinit"
  )
  
  override def ivyDeps = Agg(
    ivy"org.chipsalliance::chisel:7.0.0-RC1",
    ivy"io.circe::circe-core:0.14.6",
    ivy"io.circe::circe-generic:0.14.6",
    ivy"io.circe::circe-parser:0.14.6"
  )
  
  override def scalacPluginIvyDeps = Agg(
    ivy"org.chipsalliance:::chisel-plugin:7.0.0-RC1"
  )
  
  object test extends SbtTests with TestModule.ScalaTest {
    override def ivyDeps = m.ivyDeps() ++ Agg(
      ivy"org.scalatest::scalatest:3.2.19"
    )
  }
}

def pythonTest = T {
  val args = Seq("python", "-m", "pytest", "test/main/python/", "-v")
  os.proc(args).call(millSourcePath)
}

def pythonTestVerbose = T {
  val args = Seq("python", "-m", "pytest", "test/main/python/", "-v", "-s")
  os.proc(args).call(millSourcePath)
}

def testAll = T {
  fmvpu.test.test()
  pythonTest()
}

def docs = T {
  // Generate Scaladoc for FMVPU only
  val docJar = fmvpu.docJar()
  val docsDir = millSourcePath / "docs"
  val apiDir = docsDir / "api" / "generated"
  
  // Extract Scaladoc to docs/api/generated/
  os.makeDir.all(apiDir)
  os.proc("unzip", "-o", docJar.path, "-d", apiDir).call()
  
  println(s"✓ Scaladoc generated at: docs/api/generated/index.html")
  println(s"✓ Markdown docs available at: docs/README.md")
  
  PathRef(docsDir)
}
